// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TinkoffApi.DAL;

namespace TinkoffApi.Migrations
{
    [DbContext(typeof(TinkoffApiContext))]
    partial class TinkoffApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TinkoffApi.Data.Entities.LogEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("eventDt");

                    b.Property<int?>("eventType");

                    b.Property<string>("info");

                    b.HasKey("id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("TinkoffApi.Data.Entities.OperationHistory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("Expire");

                    b.Property<double>("Price");

                    b.Property<int>("Status");

                    b.Property<string>("figi");

                    b.Property<int>("lots");

                    b.Property<int>("operationStatus");

                    b.Property<string>("orderId");

                    b.Property<int>("orderMode");

                    b.Property<int>("orderType");

                    b.Property<DateTime>("time");

                    b.HasKey("id");

                    b.ToTable("OperationsHistory");
                });

            modelBuilder.Entity("TinkoffApi.Data.Entities.PortfolioHistory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("balance");

                    b.Property<int>("currency");

                    b.Property<DateTime>("time");

                    b.HasKey("id");

                    b.ToTable("PortfolioHistory");
                });

            modelBuilder.Entity("TinkoffApi.Data.Entities.OperationHistory", b =>
                {
                    b.OwnsOne("TinkoffApi.Data.Models.MoneyAmount", "Commission", b1 =>
                        {
                            b1.Property<int>("OperationHistoryid");

                            b1.Property<int>("Currency");

                            b1.Property<double>("Value");

                            b1.HasKey("OperationHistoryid");

                            b1.ToTable("OperationsHistory");

                            b1.HasOne("TinkoffApi.Data.Entities.OperationHistory")
                                .WithOne("Commission")
                                .HasForeignKey("TinkoffApi.Data.Models.MoneyAmount", "OperationHistoryid")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TinkoffApi.Data.Models.StopLoss.StopLossData", "StopLoss", b1 =>
                        {
                            b1.Property<int>("OperationHistoryid");

                            b1.Property<double>("Procent");

                            b1.Property<double>("Value");

                            b1.HasKey("OperationHistoryid");

                            b1.ToTable("OperationsHistory");

                            b1.HasOne("TinkoffApi.Data.Entities.OperationHistory")
                                .WithOne("StopLoss")
                                .HasForeignKey("TinkoffApi.Data.Models.StopLoss.StopLossData", "OperationHistoryid")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TinkoffApi.Data.Models.TakeProfit.TakeProfitData", "TakeProfit", b1 =>
                        {
                            b1.Property<int>("OperationHistoryid");

                            b1.Property<double>("Procent");

                            b1.Property<double>("Value");

                            b1.HasKey("OperationHistoryid");

                            b1.ToTable("OperationsHistory");

                            b1.HasOne("TinkoffApi.Data.Entities.OperationHistory")
                                .WithOne("TakeProfit")
                                .HasForeignKey("TinkoffApi.Data.Models.TakeProfit.TakeProfitData", "OperationHistoryid")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
